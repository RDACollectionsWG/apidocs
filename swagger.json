{
    "swagger": "2.0",
    "info": {
        "title": "RDA Collections API",
        "description": "API Strawman for RDA Research Data Collections WG",
        "version": "1.0.0"
    },
    "host": "api.example.org",
    "schemes": [
        "https"
    ],
    "basePath": "/v1",
    "produces": [
        "application/json"
    ],
    "securityDefinitions": {
        "oauth": {
            "type": "oauth2",
            "authorizationUrl": "http://example.org/oauth/authorize",
            "flow": "accessCode",
            "tokenUrl": "http://example.org/oauth/token",
            "scopes": {
                "write": "Can write collections",
                "read": "Can read collections",
                "modify": "Can modify collections"
            }
        }
    },
    "paths": {
        "/capabilities": {
            "get": {
                "summary": "Get the service-level capabilities",
                "tags": [
                    "Service"
                ],
                "responses": {
                    "200": {
                        "description": "Service Level Capabilities",
                        "schema": {
                            "$ref": "#/definitions/ServiceCapabilities"
                        }
                    }
                }
            }
        },
        "/collections": {
            "get": {
                "summary": "Get list of all collections",
                "description": "The Collections endpoint returns information about the collections available at this service. \nThe response includes the PID for the collection, the display name and other metadata.\n",
                "parameters": [
                    {
                        "name": "filter_by_modeltype",
                        "in": "query",
                        "description": "Filter by type of collection model.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "filter_by_datatype",
                        "in": "query",
                        "description": "Filter collections by data type of contained collection member.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "filter_by_accesstype",
                        "in": "query",
                        "description": "Filter collections by type of collection access type.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "filter_by_owner",
                        "in": "query",
                        "description": "Filter collections by owner of the collection",
                        "type": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort criteria",
                        "type": "string",
                        "required": false
                    }
                ],
                "tags": [
                    "Collections"
                ],
                "responses": {
                    "200": {
                        "description": "A collections cursor",
                        "schema": {
                            "$ref": "#/definitions/CollectionCursor"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Create a new collection.",
                "description": "Creates a new collection in the collection store.",
                "parameters": [
                    {
                        "name": "content",
                        "in": "body",
                        "description": "collection metadata",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Collection"
                        }
                    }
                ],
                "tags": [
                    "Collections"
                ],
                "security": [
                    {
                        "oauth": [
                            "write"
                        ]
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successful creation",
                        "schema": {
                            "$ref": "#/definitions/Collection"
                        }
                    },
                    "405": {
                        "description": "Invalid Input",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/collections/{id}": {
            "get": {
                "summary": "Get metadata about a specific collection",
                "description": "Gets a specific collection by its pid",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Persistent identifier for the collection",
                        "required": true,
                        "type": "string"
                    }
                ],
                "tags": [
                    "Collections"
                ],
                "responses": {
                    "200": {
                        "description": "The requested collection",
                        "schema": {
                            "$ref": "#/definitions/Collection"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update collection metadata",
                "description": "Updates collection metadata",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Persistent identifier for the collection",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "content",
                        "in": "body",
                        "description": "collection metadata",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Collection"
                        }
                    }
                ],
                "tags": [
                    "Collections"
                ],
                "security": [
                    {
                        "oauth": [
                            "modify"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful update",
                        "schema": {
                            "$ref": "#/definitions/Collection"
                        }
                    },
                    "405": {
                        "description": "Invalid Input",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete a collection",
                "description": "Deletes a collection",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Persistent identifier for the collection",
                        "required": true,
                        "type": "string"
                    }
                ],
                "tags": [
                    "Collections"
                ],
                "security": [
                    {
                        "oauth": [
                            "write"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful deletion",
                        "schema": {
                            "$ref": "#/definitions/Collection"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/collections/{id}/capabilities": {
            "get": {
                "summary": "Get the capabilities of this collection",
                "description": "Get the capabilities of this collection",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Persistent identifier for the collection",
                        "required": true,
                        "type": "string"
                    }
                ],
                "tags": [
                    "Collections"
                ],
                "responses": {
                    "200": {
                        "description": "The capabilities",
                        "schema": {
                            "$ref": "#/definitions/CollectionCapabilities"
                        }
                    }
                }
            }
        },
        "/collections/{id}/matches": {
            "post": {
                "summary": "Find members matching the supplied member",
                "description": "Find members matching the supplied member",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Persistent identifier for the collection",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "member",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Item"
                        }
                    },
                    {
                        "name": "cursor",
                        "in": "query",
                        "type": "string",
                        "description": "cursor for iterating a prior response to this query"
                    }
                ],
                "tags": [
                    "Collections"
                ],
                "security": [
                    {
                        "oauth": [
                            "read"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Union of members in the two collections",
                        "schema": {
                            "$ref": "#/definitions/MemberCursor"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/collections/{id}/intersects": {
            "get": {
                "summary": "Retrieve the members at the intersection of two collections",
                "description": "Retrieve the members at the intersection of two collections",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Persistent identifier for the collection",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "otherId",
                        "in": "query",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "cursor",
                        "in": "query",
                        "type": "string",
                        "description": "cursor for iterating a prior response to this query"
                    }
                ],
                "tags": [
                    "Collections"
                ],
                "security": [
                    {
                        "oauth": [
                            "read"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Members at the intersection",
                        "schema": {
                            "$ref": "#/definitions/MemberCursor"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/collections/{id}/union": {
            "get": {
                "summary": "Retrieve the union of two collections",
                "description": "Retrieve the union of two collections",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Persistent identifier for the collection",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "otherId",
                        "in": "query",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "cursor",
                        "in": "query",
                        "type": "string",
                        "description": "cursor for iterating a prior response to this query"
                    }
                ],
                "tags": [
                    "Collections"
                ],
                "security": [
                    {
                        "oauth": [
                            "read"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Union of members in the two collections",
                        "schema": {
                            "$ref": "#/definitions/MemberCursor"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/collections/{id}/members": {
            "get": {
                "summary": "Get the members in a collection",
                "description": "Gets members from a collection",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Persistent identifier for the collection",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter_by_datatype",
                        "in": "query",
                        "description": "Filter by datatype of collection member",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "filter_by_pidtype",
                        "in": "query",
                        "description": "Filter by pid type of the collection member",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "filter_by_accesstype",
                        "in": "query",
                        "description": "Filter by access type of collection member",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "filter_by_role",
                        "in": "query",
                        "description": "Filter by the role of a collection memeber",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "cursor",
                        "in": "query",
                        "description": "cursor for iterating a prior response to this query",
                        "type": "string"
                    },
                    {
                        "name": "expandDepth",
                        "in": "query",
                        "description": "expand members which are collections to this depth. may not exceed maxDepth capability for the collection",
                        "type": "integer",
                        "required": false
                    }
                ],
                "tags": [
                    "Members"
                ],
                "responses": {
                    "200": {
                        "description": "An array of collection members",
                        "schema": {
                            "$ref": "#/definitions/MemberCursor"
                        }
                    }
                }
            },
            "post": {
                "summary": "Add a new member to this collection",
                "description": "Adds a new member to a collection",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Persistent identifier for the collection",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "content",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Item"
                        }
                    }
                ],
                "security": [
                    {
                        "oauth": [
                            "write"
                        ]
                    }
                ],
                "tags": [
                    "Members"
                ],
                "responses": {
                    "201": {
                        "description": "Successful creation",
                        "schema": {
                            "$ref": "#/definitions/Item"
                        }
                    }
                }
            }
        },
        "/collections/{id}/members/{tid}": {
            "get": {
                "summary": "Get a specific member in a collection",
                "description": "Get a specific member in a collection",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Persistent identifier for the collection",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "tid",
                        "in": "path",
                        "type": "string",
                        "description": "Identifier for the collection member",
                        "required": true
                    }
                ],
                "tags": [
                    "Members"
                ],
                "responses": {
                    "200": {
                        "description": "The requested member",
                        "schema": {
                            "$ref": "#/definitions/Item"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update an member in a collection",
                "description": "Updates an member in a collection",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Persistent identifier for the collection",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "tid",
                        "in": "path",
                        "type": "string",
                        "description": "Identifier for the collection member",
                        "required": true
                    },
                    {
                        "name": "content",
                        "in": "body",
                        "description": "collection metadata",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Collection"
                        }
                    }
                ],
                "tags": [
                    "Members"
                ],
                "security": [
                    {
                        "oauth": [
                            "modify"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful update",
                        "schema": {
                            "$ref": "#/definitions/Item"
                        }
                    },
                    "405": {
                        "description": "Invalid Input",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete a collection member",
                "description": "Deletes a collection member",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Persistent identifier for the collection",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "tid",
                        "in": "path",
                        "type": "string",
                        "description": "Identifier for the collection member",
                        "required": true
                    }
                ],
                "tags": [
                    "Collections"
                ],
                "security": [
                    {
                        "oauth": [
                            "write"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful deletion",
                        "schema": {
                            "$ref": "#/definitions/Collection"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "CollectionCapabilities": {
            "description": "Collection Capabilities",
            "type": "object",
            "properties": {
                "isOrdered": {
                    "type": "boolean",
                    "description": "are the members in the collection ordered"
                },
                "supportsRoles": {
                    "type": "boolean",
                    "description": "does the collection support assigning roles to its members"
                },
                "membershipIsMutable": {
                    "type": "boolean",
                    "description": "is collection membership mutable (can members be added and removed)"
                },
                "metadataIsMutable": {
                    "type": "boolean",
                    "description": "is collection metadata mutable (can the metadata of this collection be changed)"
                },
                "maxDepth": {
                    "type": "integer",
                    "description": "maximum depth to which collection members can be expanded (and traversed in reverse??)",
                    "default": 0
                }
            }
        },
        "Item": {
            "description": "A data item in a collection",
            "type": "object",
            "required": [
                "datatype",
                "id",
                "location"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Identifier for the member"
                },
                "location": {
                    "type": "string",
                    "description": "Location at which the item data can be retrieved"
                },
                "datatype": {
                    "type": "string",
                    "description": "URI of the data type of this item"
                },
                "model": {
                    "type": "string",
                    "description": "URI of an ontology model class that applies to this item"
                },
                "mappings": {
                    "$ref": "#/definitions/CollectionItemMappingMetadata"
                }
            }
        },
        "Collection": {
            "description": "A collection",
            "type": "object",
            "required": [
                "pid",
                "capabilities",
                "properties",
                "description"
            ],
            "properties": {
                "pid": {
                    "type": "string",
                    "description": "Persistent Identifier for the collection."
                },
                "capabilities": {
                    "$ref": "#/definitions/CollectionCapabilities"
                },
                "properties": {
                    "$ref": "#/definitions/CollectionProperties"
                },
                "description": {
                    "type": "object",
                    "description": "Descriptive metadata about the collection"
                }
            }
        },
        "CollectionProperties": {
            "description": "Functional Properties of the Collection",
            "type": "object",
            "required": [
                "ownership",
                "model",
                "hasAccessRestrictions"
            ],
            "properties": {
                "ownership": {
                    "$ref": "#/definitions/CollectionOwnership"
                },
                "license": {
                    "type": "string",
                    "description": "URI of the license that applies to the collection"
                },
                "model": {
                    "type": "string",
                    "description": "URI of the collection modeltype that applies to the collection"
                },
                "hasAccessRestrictions": {
                    "type": "boolean",
                    "description": "indicates whether the collection is fully open or has access restrictions"
                },
                "memberOf": {
                    "type": "array",
                    "description": "list of collections to which this collection itself belongs. only possible if maxDepth capability > 0",
                    "items": {
                        "$ref": "#/definitions/Collection"
                    }
                },
                "siblings": {
                    "$ref": "#/definitions/CollectionSiblings"
                },
                "descriptionOntology": {
                    "type": "string",
                    "description": "URI of an ontology used for descriptive metadata"
                }
            }
        },
        "CollectionSiblings": {
            "description": "Next/Previous Siblings of a Collection",
            "type": "object",
            "required": [
                "next",
                "previous"
            ],
            "properties": {
                "next": {
                    "$ref": "#/definitions/Collection"
                },
                "previous": {
                    "$ref": "#/definitions/Collection"
                }
            }
        },
        "CollectionOwnership": {
            "description": "Ownership Metadata about the Collection (from the purview of the API)",
            "type": "object",
            "required": [
                "owner"
            ],
            "properties": {
                "owner": {
                    "type": "array",
                    "description": "list of owners identified by URI",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "CollectionCursor": {
            "description": "A Cursor for iterating a response set of Collections",
            "type": "object",
            "required": [
                "contents",
                "next_cursor",
                "prev_cursor"
            ],
            "properties": {
                "contents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Collection"
                    }
                },
                "next_cursor": {
                    "type": "string"
                },
                "prev_cursor": {
                    "type": "string"
                }
            }
        },
        "MemberCursor": {
            "description": "A Cursor for iterating a response set of Collection Members",
            "type": "object",
            "required": [
                "contents",
                "next_cursor",
                "prev_cursor"
            ],
            "properties": {
                "contents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Item"
                    }
                },
                "next_cursor": {
                    "type": "string"
                },
                "prev_cursor": {
                    "type": "string"
                }
            }
        },
        "Error": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "format": "int32"
                },
                "message": {
                    "type": "string"
                },
                "fields": {
                    "type": "string"
                }
            }
        },
        "ServiceCapabilities": {
            "description": "Service Level Capabilities",
            "type": "object",
            "properties": {
                "pidProviderType": {
                    "type": "string",
                    "description": "URI which describes the type of PID this collection service assigns to new items, if any"
                },
                "enforcesAccess": {
                    "type": "boolean",
                    "description": "whether or not the service enforces access controls"
                },
                "supportsPagination": {
                    "type": "boolean",
                    "description": "whether or not the service can paginate cursors"
                }
            }
        },
        "CollectionItemMappingMetadata": {
            "description": "metadata on an item which is available by mapping from capabilities",
            "type": "object",
            "properties": {
                "role": {
                    "type": "string",
                    "description": "URI of the role that applies to this item. Only available if the collection supportsRoles"
                },
                "index": {
                    "type": "integer",
                    "description": "position of the item in the collection. Only available if the Collection isOrdered"
                }
            }
        }
    }
}